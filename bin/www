#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('oopartsgames:server');
var http = require('http');
var models = require('../models');
var Primus = require('primus');
var Rooms = require('primus-rooms');
var socks = require('../socks');
var primus_session = require('../middleware/primus_session');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080);
var ip = process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0';
app.set('port', port);
app.set('ip', ip);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var primus = new Primus(server, {transformer: 'SOCKJS'});

/*
Room concept of This part is NOT equal to room model of sequelize.
*/

/*
Share session data using middleware
*/
primus.before('cookies', app.get('cookie_inst'));
primus.before('session', primus_session, {store: app.get('store_inst')});

primus.use('rooms', Rooms);
primus.on('connection', function(spark){
  spark.on('data', function(data){
    data = data || {};
    var action = data.action;
    var room = data.room;
    if ('join' === action){
      spark.join(room, function(){
        console.log(spark.id + ' joined ' + room);
        socks[room].open(spark, data.data);
      });
    }
    else if ('leave' === action){
      spark.leave(room, function(){
        console.log(spark.id + ' leaved ' + room);
        socks[room].close(spark, data.data);
      });
    }
    else{
      console.log(spark.id + ' signaled to ' + room);
      socks[room].recv(spark, data.data);
    }
  });
});
primus.on('disconnection', function(spark){
  var rooms = spark.rooms();
  console.log(spark + ' disconnected');
  for(var i = 0; i < rooms.length; i++){
    socks[rooms[i]].close(spark, {});
  }
  spark.leaveAll();
});

primus.save(__dirname + '/../public/javascripts/primus.js');

/**
 * Listen on provided port, on all network interfaces.
 */
models.sequelize.sync().then(function(){
  models.init_row();
	server.listen(port, ip);
  console.log(ip + ':' + port + ' server start');
	server.on('error', onError);
	server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
